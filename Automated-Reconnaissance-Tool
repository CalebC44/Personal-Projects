
#! /bin/python3
import os
import requests
import json
import argparse
from shodan import Shodan

def default(Domain_Name):
    #Domain_Name = input("Enter a domain name: ")

    print("="*50)
    print("Who owns this domain")
    print("="*50)

    os.system(f"whois {Domain_Name} | grep -E 'Domain Name|Registrant Organization|Creation Date|Updated Date|Expiry Date|Registrar:|Name Server'")

    print("="*50)
    print("IP Address associated with the hostname")
    print("="*50)

    os.system(f"nslookup {Domain_Name}")

    #VirusTotal Output

    url = f"https://www.virustotal.com/api/v3/domains/{Domain_Name}"
    headers = {
        "accept": "application/json",
        "x-apikey": "[YOUR_API_KEY]"
    }

    response = requests.get(url, headers=headers)
    data = response.json()

    # Extract attributes
    attributes = data["data"]["attributes"]

    print("="*50)
    print(f"VirusTotal Domain Report for: {data['data']['id']}")
    print("="*50)

    print(f"Reputation Score: {attributes.get('reputation', 'N/A')}")
    print(f"Total Votes: Harmless={attributes['total_votes']['harmless']} | Malicious={attributes['total_votes']['malicious']}")

    print("\nPopularity Ranks:")
    for source, rank_info in attributes.get("popularity_ranks", {}).items():
        print(f" - {source}: {rank_info.get('rank', 'N/A')}")

def shodan(ip):
    #Shodan Code-------------------------------------
    print("="*50)
    print("Shdodan output")
    print("="*50)
    api = Shodan('[YOUR_API_KEY]')

    json_input = api.host(ip)

    # Load the JSON string into a Python dictionary
    data = json_input

    print("## 1. Extracted Primary Host Information")

    ip_address = data.get('ip_str')
    hostnames = data.get('hostnames')
    organization = data.get('org')
    location = f"{data.get('city')}, {data.get('region_code')}, {data.get('country_name')}"
    asn = data.get('asn')
    open_ports = data.get('ports')

    print(f"IP Address: {ip_address}")
    print(f"Hostnames: {', '.join(hostnames) if hostnames else 'N/A'}")
    print(f"Organization (ASN): {organization} ({asn})")
    print(f"Location: {location}")
    print(f"Open Ports: {', '.join(map(str, open_ports)) if open_ports else 'N/A'}")

    print("\n")
    print("## 2. Summary of Port Scan Data")

    scan_results = []
    for item in data.get('data', []):
        port = item.get('port')
        transport = item.get('transport')
        module = item.get('_shodan', {}).get('module', 'N/A')
        timestamp = item.get('timestamp')
        service_info = None

        if module in ['dns-tcp', 'dns-udp']:
            # Extract DNS specific info
            recursion = item.get('data', '').strip()
            service_info = f"DNS - {recursion}"
        elif module == 'https':
            # Extract HTTP/SSL specific info
            http_title = item.get('http', {}).get('title')
            ssl_version = item.get('ssl', {}).get('cipher', {}).get('version')
            service_info = f"HTTPS - Title: '{http_title}', SSL/TLS: {ssl_version}"
        
    
        scan_results.append({
            'Port': port,
            'Protocol': transport.upper(),
            'Module': module,
            'Timestamp': timestamp,
            'Service_Details': service_info
        })

    if scan_results:
        print(f"{'Port':<8}{'Proto':<8}{'Module':<15}{'Service Details':<50}")
        print(f"{'----':<8}{'-----':<8}{'-------':<15}{'---------------':<50}")
        for res in scan_results:
            print(f"{res['Port']:<8}{res['Protocol']:<8}{res['Module']:<15}{res['Service_Details']:<50}")
    else:
        print("No detailed port scan data found.")

def main():
    parser=argparse.ArgumentParser(description="Domain investigation Tool")
    parser.add_argument("domain", help="Domain to investigate")   
    parser.add_argument("--default",action="store_true", help="Default output (whois, nslookup, and VirusTotal)")
    parser.add_argument("--shodan",action="store_true", help="Requires an IP")

    args = parser.parse_args()
    
    if args.default:
        default(args.domain)

    if args.shodan:
        shodan(args.domain)

if __name__ == "__main__":
        main()
